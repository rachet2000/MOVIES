function [origMovie,lpMovie,hpMovie] = mkFilteredMovie(foldername,filename,lambda)% MKFILTEREDMOVIE(filename,lambda,starframe) creates a high and lowpass filtered version of a movie (.mat format).% example:    [origMovie,lpMovie,hpMovie]=mkFilteredMovie('movie01','movie01_0000',16);%USES: lpfilter.m, hpfilter.m, dftuv.mfoldername = 'naturalTifs';filename = 'naturalTifs_0.mat';lambda = 2;% load videocomputerType = computer;			% $$$if strcmp(computerType,'MAC2')	 volSpec = 'Macintosh_HD:Natural_Image_Movies';elseif strcmp(computerType,'PCWIN')	 volSpec = 'G:\Movies\';origMovie(:,:,k);ros(szeX,szeY,nframes);elseif strcmp(computerType, 'GLNXA64')     volSpec = '/home/david/MOVIES/';endNaturalImagePathSpec = fullfile(volSpec,foldername); % $$ fullfile() is OS-savvy filespec-builder cd(NaturalImagePathSpec);load(filename);% create variable sizesnamepad[szeX,szeY,nframes]=size(origMovie); % reads size of movielpMovie=zeros(szeX,szeY,nframes);hpMovie=zeros(szeX,szeY,nframes);% create low and high-pass filterscutoff=(szeX/lambda)*2;% cut off frequency lambda: must be 2 due to the padding below.% generates up the two filterslpf=lpfilter('ideal',szeX*2,szeY*2,cutoff); % filters must be *2 size image due to fft padding. hpf=1-lpf;for k=1:nframes         img = origMovie(:,:,k);    im=[img fliplr(img); flipud(img) fliplr(flipud(img))];    imfft = fft2(im);% variables set by user in function callNaturalMovie.name.folder=folder;NaturalMovie.name.type=movietype;NaturalMovie.frames.start=startframe;NaturalMovie.duration=duration; % in seconrgb2gray(double(imread('merry1.TIF'))./255)d    im_lpfilt=real(ifft2(imfft.*lpf));    im_hpfilt=real(ifft2(imfft.*hpf));    lpMovie(:,:,k)=uint8(im_lpfilt(1:szeX,1:szeY));    hpMovie(:,:,k)=uint8(im_hpfilt(1:szeX,1:szeY));endsavename=strcat(filename,'_',namepad(lambda,0));origMovie=uint8(origMovie); NaturalMovie.lambda=lambda;save(savename,'lpMovie','hpMovie','origMovie','NaturalMovie');origMovie = ans;